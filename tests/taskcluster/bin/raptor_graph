#! /usr/bin/env node

/**
Task graph extension / decisions for gaia raptor tests
*/
var decorate = require('../lib/decorate_task');
var yaml = require('js-yaml');
var fs = require('fs');
var fsPath = require('path');
var slugid = require('slugid');
var util = require('util');
var template = require('json-templater/object');
var exec = require('child_process').exec;
var Promise = require('promise');
var url = require('url');
var taskcluster = require('taskcluster-client');
var emulatorBuildURL;
var raptorTimeout = 600000;
var appLaunchDelay = 10000;
var gaiaBaseMinusOne = '0';

const TC_CLIENT_OPTS = { timeout: 30 * 1000 };

// taskcluster worker type for raptor tasks
RAPTOR_WORKER_TYPE = 'raptor';

const LAUNCH_TEST_APPS = [{ gaia_name: "calendar", th_name: "Calendar", th_symbol: "cal" },
                          { gaia_name: "clock", th_name: "Clock", th_symbol: "clk" },
                          { gaia_name: "contacts", th_name: "Contacts", th_symbol: "con" },
                          { gaia_name: "dialer", th_name: "Dialer", th_symbol: "dlr" },
                          { gaia_name: "email", th_name: "Email", th_symbol: "eml"},
                          { gaia_name: "fm", th_name: "FM", th_symbol: "fm" },
                          { gaia_name: "gallery", th_name: "Gallery", th_symbol: "gal" },
                          { gaia_name: "music", th_name: "Music", th_symbol: "mus" },
                          { gaia_name: "settings", th_name: "Settings", th_symbol: "set" },
                          { gaia_name: "sms", th_name: "SMS", th_symbol: "sms" },
                          { gaia_name: "video", th_name: "Video", th_symbol: "vid" },
                          { gaia_name: "test-startup-limit", th_name: "Test-startup", th_symbol: "tst" }];

// number of times each app is launched during the launch test
const LAUNCH_TEST_RUNS = 30;

// Cache for task definitions...
var TASK_DEFINITIONS = {};
function loadTask(name, parameters) {
  if (!TASK_DEFINITIONS[name]) {
    var path = fsPath.resolve(__dirname + '/../tasks/' + name + '.yml');
    TASK_DEFINITIONS[name] = yaml.safeLoad(fs.readFileSync(path));
  }
  return decorate(TASK_DEFINITIONS[name], parameters);
}

function params() {
  return Array.prototype.slice.call(arguments).reduce(function(target, props) {
    for (var key in props) target[key] = props[key];
    return target;
  }, {});
}

// Map of task ids to task names
var taskIdMap = {};
var config = {};
var suiteName, symbol, taskName;
var requiredBaseTasks = [];
var requiredPatchTasks = [];

/*
When testing a pull request:
'base build' will be the provided BASE_REV
'patch build' will be the provided PR / HEAD_REV

When not testing a pull request (gaia-master):
'base build' will be BASE_REV -1 commit (before merge)
'patch build' will be BASE_REV (has the PR merged)

Results task looks for increase from 'base build'
to 'patch build' and flags if is above threshold.
*/

// build the task config object for each app
var config = {};

LAUNCH_TEST_APPS.map(function(nextApp) {
  taskName = nextApp.gaia_name;
  config[taskName] = {
    definition: 'raptor',
    params: {
      raptorSuiteName: 'App launch test: ' + nextApp.th_name,
      baseGaia: process.env.GITHUB_BASE_REV,
      patchGaia: process.env.GITHUB_HEAD_REV,
      raptorRuns: LAUNCH_TEST_RUNS,
      raptorApp: nextApp.gaia_name,
      treeherderSym: nextApp.th_symbol,
      workerType: RAPTOR_WORKER_TYPE
    }
  };
});

/**
 * Execute the built command in a child process
 * @returns {Promise}
 */
var do_command = function(cmd) {
  return new Promise(function(resolve, reject) {
    exec(cmd, function(err, stdout, stderr) {
      if (err) {
        return reject(err, stderr);
      }
      resolve(stdout.trim());
    });
  });
};

/**
 * Resolve when latest emulator build url has been retrieved
 * @returns {Promise}
 */
var getEmulator = function() {
  return new Promise(function(resolve, reject) {

    // Get taskId for the last successful emulator-ics build task
    var taskId = 99;
    var ns = "buildbot.branches.mozilla-central.emulator-ics";

    // Find task in namespace
    var index = new taskcluster.Index(TC_CLIENT_OPTS);
    index.findTask(ns)
      .then(function(foundTask) {
        // Url for build is
        // https://queue.taskcluster.net/v1/task/{taskId}/artifacts/{artifact}
        emulatorBuildURL = url.format({
          protocol: 'https',
          host: 'queue.taskcluster.net',
          pathname: '/v1/task/' + foundTask.taskId + '/artifacts/public/build/emulator.tar.gz'
        });
        resolve();
      });
  });
};

/**
 * Resolve when patchTask gaia rev has been retrieved and set
 * When not a PR, we want patchTask rev to be BASE_REV -1 commit
 * @returns {Promise}
 */
var setpatchTaskRev = function() {
  return new Promise(function(resolve, reject) {
    if (process.env.GITHUB_PULL_REQUEST === '0') {
      var cmd = "cd /home/tester/git_checkout && git rev-parse HEAD~1";
      do_command(cmd).then(function(value) {
        gaiaBaseMinusOne = value;
        resolve();
      });
    } else {
      resolve();
    }
  });
};

// Final task graph definition place holder...
var raptorGraph = {
  tasks: []
};

// XXX: When extending the task graph the scopes and metadata fields are invalid
// according to the schema so for local testing we need the --full option so the
// task graph can be submitted.
if (process.argv[2] === '--full') {
  raptorGraph.scopes = [
    'docker-worker:cache:resources',

    util.format(
      'queue:define-task:%s/%s',
      config.baseTask1.params.provisionerId, config.baseTask1.params.workerType
    ),

    util.format(
      'queue:create-task:%s/%s',
      config.baseTask1.params.provisionerId, config.baseTask1.params.workerType
    ),
  ];

  raptorGraph.metadata = {
    source: process.env.GITHUB_HEAD_GIT + '/blob/tests/taskcluster/bin/raptor_graph',
    owner: 'rwood@mozilla.com', // TODO: Obviously change this...
    description: 'Generated task graph for gaia raptor',
    name: 'Gaia Raptor'
  };
}

var nextYear = new Date(Date.now());
nextYear.setFullYear(nextYear.getFullYear() + 1);
nextYear = nextYear.toJSON();
var branchElement, patchElement;

getEmulator()
  .then(setpatchTaskRev)
  .then(function() {

    // Expand all tasks based on the config object
    Object.keys(config).forEach(function(raptorTask) {
      var definition = config[raptorTask].definition;

      config[raptorTask].params.provisionerId = 'aws-provisioner-v1';
      config[raptorTask].params.raptorTimeout = raptorTimeout;
      config[raptorTask].params.emulatorURL = emulatorBuildURL;
      config[raptorTask].params.raptorLaunchDelay = appLaunchDelay;

      taskIdMap[raptorTask] = slugid.v4();

      // when not a PR 'base' should be BASE -1 commit (before the
      // merge) and 'patch' should be BASE_REV (has the merged code)
      if (process.env.GITHUB_PULL_REQUEST === '0') {
        config[raptorTask].params.baseGaia = gaiaBaseMinusOne;
        config[raptorTask].params.patchGaia = process.env.GITHUB_BASE_REV;
      }

      var task = loadTask(definition, params(config[raptorTask].params, {
        // Useful for environment variables
        process: process,
        // For dependencies
        nextYear: nextYear
      }));
      task.taskId = taskIdMap[raptorTask];
      if (definition === 'raptor_result') {
        task.requires = requiredBaseTaskIds.concat(requiredPatchTaskIds);
      }
      raptorGraph.tasks.push(task);

      return;
    });

    raptorGraph.tasks = raptorGraph.tasks.map(function(task) {
      return template(task, { tasks: taskIdMap });
    });

    // Output the entire task graph for extension....
    process.stdout.write(JSON.stringify(raptorGraph, null, 2));

  });